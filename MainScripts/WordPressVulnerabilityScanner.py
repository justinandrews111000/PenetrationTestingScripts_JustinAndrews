"""
Script Name: WordPressVulnerabilityScanner.py
Author: Justin Andrews
Version: 1.0
Date: 2024-03-19

Description:
    This script scans WordPress plugins for known vulnerabilities by checking against
    the Wordfence vulnerability database. It utilizes the Utils.py classes for logging,
    web interaction, and argument handling.

Arguments:
    url                 WordPress site URL to scan
    --debug            Enable debug output
    --logging          Enable logging to file

Usage:
    python WordPressVulnerabilityScanner.py <url> [options]

Example:
    python WordPressVulnerabilityScanner.py http://example.com -d -l

GUI Parameters Start:
"url": ""
"debug": false
"logging": false
"persistent": false
GUI Parameters End:
"""

import sys
import importlib.util
import re
import html
from pathlib import Path
from typing import Dict, List, Optional, Tuple
from Utils import LoggingPipeline, WebDriver, ArgumentHandler


class WordPressVulnerabilityScanner:
    """Main class for WordPress plugin vulnerability scanning."""

    def __init__(self, url: str, debug: bool = False, logging: bool = False):
        """
        Initialize scanner with logging support.
        
        Args:
            debug (bool): Enable debug output
            logging (bool): Enable logging to file
        """
        self.logger = LoggingPipeline(
            debug=debug, logging=logging, log_name="wordpress_scanner"
        )
        self.logger.append_log(f"Initializing scanner for target: {self.target_url}", "INFO")
        self.driver = WebDriver(
            url="https://www.wordfence.com/threat-intel/vulnerabilities/wordpress-plugins/",
            headless=True,
            debug=debug,
            logging=logging
        )
        self.found_vuls_dict: Dict[str, str] = {}

    def get_page_links(self, soup) -> List[str]:
        """Extract relevant WordPress plugin vulnerability links from page."""
        link_list = []
        for link in soup.find_all("a"):
            if (link.get("href") is not None 
                and not re.search("q=", link.get("href"))
                and re.search("wordpress-plugins", link.get("href"))):
                link_list.append(link.get("href"))
        
        return list(set(link_list))

    def check_against_db(self, link_list: List[str], version: str, name: str) -> None:
        """
        Check plugin version against vulnerability database entries.

        Args:
            link_list (List[str]): List of vulnerability database links to check
            version (str): Plugin version to check
            name (str): Plugin name
        """
        for link in link_list:
            self.driver.navigate(link)
            soup = self.driver.get_page_source()

            link_text = re.findall(r"<a .*?>(.*?)<\/a>", str(soup))
            for text in link_text:
                text = html.unescape(text)
                if text is not None and re.search(r"\d.", text):
                    operator_and_version = re.search(
                        r"([<>=]{0,2})\s{0,1}([\d\.]{3,6})", text
                    )

                    if not operator_and_version:
                        continue

                    operator = operator_and_version.group(1) or "="
                    vul_version = operator_and_version.group(2)

                    if not re.search(r"\d\d\d\d", vul_version):
                        try:
                            vul_version_comp = int(vul_version.replace(".", ""))
                            version_comp = int(version.replace(".", ""))
                        except ValueError:
                            continue

                        self._check_version_comparison(
                            operator, vul_version_comp, version_comp, name, vul_version, version
                        )

    def _check_version_comparison(
        self, 
        operator: str, 
        vul_version_comp: int, 
        version_comp: int,
        name: str,
        vul_version: str,
        version: str
    ) -> None:
        """Check version comparison based on operator."""
        formatted_name = name.replace("+", " ")
        is_vulnerable = False

        if operator == "=" and vul_version_comp == version_comp:
            is_vulnerable = True
        elif operator == ">" and vul_version_comp > version_comp:
            is_vulnerable = True
        elif operator == "<" and vul_version_comp < version_comp:
            is_vulnerable = True
        elif operator == ">=" and vul_version_comp >= version_comp:
            is_vulnerable = True
        elif operator == "<=" and vul_version_comp <= version_comp:
            is_vulnerable = True

        if is_vulnerable:
            key = f"Vulnerable: {formatted_name} {operator} {vul_version}"
            value = f"Found: {formatted_name} {version}"
            self.found_vuls_dict[key] = value
            self.logger.append_log(f"Found vulnerability: {key} | {value}", "WARNING")

    def scan_plugins(self) -> None:
        """Scan WordPress plugins for vulnerabilities."""
        try:
            # Import and run plugin crawler
            # Store target URL
            self.target_url = url.rstrip('/')  # Remove trailing slash if present
            
            spec = importlib.util.spec_from_file_location(
                "plugin_crawler", 
                Path("web_crawler/web_crawler/spiders/plugin_crawler.py")
            )
            if not spec:
                self.logger.append_log("Failed to locate plugin crawler module", "ERROR")
                return

            plugin_crawler = importlib.util.module_from_spec(spec)
            spec.loader.exec_module(plugin_crawler)

            self.logger.append_log("Starting plugin crawl...", "INFO")
            plugins = plugin_crawler.start_crawler(url=self.target_url)
            
            if not plugins:
                self.logger.append_log("No plugins found on the target site", "WARNING")
                return
                
            self.logger.append_log(f"Found {len(plugins)} plugins to scan", "INFO")
            for plugin in plugins:
                self.logger.append_log(f"Found plugin: {plugin}", "INFO")

            self.logger.append_log("\nStarting vulnerability checks...", "INFO")
            base_url = "https://www.wordfence.com/threat-intel/vulnerabilities/wordpress-plugins/?q="

            for plugin in plugins:
                # Parse plugin name and version
                search_terms = plugin.split(":")
                if len(search_terms) != 2:
                    continue

                name = re.sub("-", "+", search_terms[0])
                version = search_terms[1]

                self.logger.append_log(f"\nScanning plugin: {name} v{version}", "INFO")
                
                # Navigate and get links
                search_url = f"{base_url}{name}"
                self.driver.navigate(search_url)
                soup = self.driver.get_page_source()
                link_list = self.get_page_links(soup)

                # Check for vulnerabilities
                self.check_against_db(link_list, version, name)

            self.print_results()

        except Exception as e:
            self.logger.append_log(f"Error during plugin scan: {str(e)}", "ERROR")
            if self.logger.debug:
                import traceback
                self.logger.append_log(traceback.format_exc(), "ERROR")

    def print_results(self) -> None:
        """Print scan results."""
        self.logger.start_section("Scan Results")

        if not self.found_vuls_dict:
            self.logger.append_log("No vulnerabilities found", "SUCCESS")
            return

        self.logger.append_log(
            f"Found {len(self.found_vuls_dict)} potential vulnerabilities:", "WARNING"
        )

        for vul, found in self.found_vuls_dict.items():
            self.logger.append_log(f"{vul} | {found}", "WARNING")

        self.logger.append_log(
            "Search https://www.wordfence.com/threat-intel/vulnerabilities/wordpress-plugins "
            "for more information on suspected vulnerable plugins.",
            "INFO"
        )

    def cleanup(self) -> None:
        """Cleanup resources."""
        if self.driver:
            self.driver.cleanup()


def main():
    # Define argument configuration
    arg_config = {
        "script": {
            "name": "WordPressVulnerabilityScanner.py",
            "description": "WordPress Plugin Vulnerability Scanner",
        },
        "args": {
            "url": {
                "help": "WordPress site URL to scan",
                "positional": True,
            },
            "debug": {
                "flag": "-d",
                "action": "store_true",
                "help": "Enable debug output",
            },
            "logging": {
                "flag": "-l",
                "action": "store_true",
                "help": "Enable logging to file",
            },
        },
    }

    # Parse arguments
    arg_handler = ArgumentHandler(arg_config)
    args = arg_handler.parse_args()

    # Initialize scanner
    scanner = None
    try:
        scanner = WordPressVulnerabilityScanner(
            url=args.url,
            debug=args.debug,
            logging=args.logging
        )

        # Run the scan
        scanner.scan_plugins()

    except Exception as e:
        if scanner and scanner.logger:
            scanner.logger.append_log(f"Fatal error: {str(e)}", "ERROR")
            if args.debug:
                import traceback
                scanner.logger.append_log(traceback.format_exc(), "ERROR")
        return 1

    finally:
        if scanner:
            scanner.cleanup()

    return 0


if __name__ == "__main__":
    sys.exit(main())